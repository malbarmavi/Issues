html {
  height: 100%;
  box-sizing: border-box; }

*,
*:before,
*:after {
  box-sizing: inherit; }

::-webkit-scrollbar {
  width: 6px;
  border: 1px solid transparent; }

::-webkit-scrollbar-thumb {
  border-radius: 5px;
  background: #535353; }

body {
  padding-top: 60px;
  padding-bottom: 85px;
  font-family: 'Gudea', sans-serif;
  position: relative;
  width: 100%;
  height: auto;
  min-height: 100%;
  /*user-select: none;*/ }

/* Set padding to keep content from hitting the edges */
.body-content {
  padding-left: 15px;
  padding-right: 15px; }

/* Override the default bootstrap behavior where horizontal description lists
   will truncate terms that are too long to fit in the left column
*/
.dl-horizontal dt {
  white-space: normal; }

.border, .task-state-box, .undecided-box, .inprocess-box, .test-box, .faile-box, .success-box, .all-box {
  border: 1px #e5e5e5 solid; }

.box-shadow {
  box-shadow: 0px 1px 3px rgba(0, 0, 0, 0.05) !important; }

/* validation style */
.input-validation-error {
  border: 1px solid rgba(200, 0, 0, 0.5);
  box-shadow: 0 2px 6px rgba(255, 0, 0, 0.3) inset; }

.display-block {
  display: block; }

.nice-col-padding .col-md-4, .nice-col-padding .col-sm-6 {
  padding-left: 5px !important;
  padding-right: 5px !important; }

.dropdown-arrow {
  color: #999 !important;
  cursor: pointer;
  font-size: 9pt !important; }

.font-size-8 {
  font-size: 8pt !important; }

.text-bold {
  font-weight: bold; }

.text-underline {
  text-decoration: underline; }

.full-width {
  width: 100% !important; }

.no-margin {
  margin: 0; }

.opacity-5 {
  opacity: 0.5; }

.opacity-8 {
  opacity: 0.8; }

footer {
  border-top: 1px solid #eee;
  position: absolute;
  right: 0;
  bottom: 0;
  left: 0;
  padding: 10pt 0 5pt 0; }
  footer .fa {
    font-size: 12pt;
    margin: 0 2pt; }

.center-it {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translateX(-50%) translateY(50%); }

.padding-25 {
  padding: 25px; }

.border-radius-2 {
  border-radius: 2px !important; }

.card, .task-info .info-box {
  border-radius: 2px;
  background-color: #fff;
  padding: 5px 10px;
  margin-top: 10px; }

.card:hover, .task-info .info-box:hover, .card:focus, .task-info .info-box:focus {
  box-shadow: 0px 3px 3px -1px rgba(0, 0, 0, 0.1) !important; }

.card-button i {
  color: #999;
  width: 20px;
  height: 20px;
  margin-right: 5px;
  cursor: pointer;
  text-align: center; }

.inprocess .card, .inprocess .task-info .info-box, .task-info .inprocess .info-box {
  background-color: #3498db;
  border-color: #2980b9 !important;
  color: #fff; }
  .inprocess .card .dropdown-arrow, .inprocess .task-info .info-box .dropdown-arrow, .task-info .inprocess .info-box .dropdown-arrow, .inprocess .card .card-button i, .inprocess .task-info .info-box .card-button i, .task-info .inprocess .info-box .card-button i {
    color: #fff !important; }

.test .card, .test .task-info .info-box, .task-info .test .info-box {
  background-color: #f1c40f;
  border-color: #f39c12 !important;
  color: #fff; }
  .test .card .dropdown-arrow, .test .task-info .info-box .dropdown-arrow, .task-info .test .info-box .dropdown-arrow, .test .card .card-button i, .test .task-info .info-box .card-button i, .task-info .test .info-box .card-button i {
    color: #fff !important; }

.faile .card, .faile .task-info .info-box, .task-info .faile .info-box {
  background-color: #e74c3c;
  border-color: #c0392b !important;
  color: #fff; }
  .faile .card .dropdown-arrow, .faile .task-info .info-box .dropdown-arrow, .task-info .faile .info-box .dropdown-arrow, .faile .card .card-button i, .faile .task-info .info-box .card-button i, .task-info .faile .info-box .card-button i {
    color: #fff !important; }

.success .card, .success .task-info .info-box, .task-info .success .info-box {
  background-color: #2ecc71;
  border-color: #27ae60 !important;
  color: #fff; }
  .success .card .dropdown-arrow, .success .task-info .info-box .dropdown-arrow, .task-info .success .info-box .dropdown-arrow, .success .card .card-button i, .success .task-info .info-box .card-button i, .task-info .success .info-box .card-button i {
    color: #fff !important; }

.task-state-box, .undecided-box, .inprocess-box, .test-box, .faile-box, .success-box, .all-box {
  display: inline-block;
  cursor: pointer;
  text-align: center;
  min-width: 65px;
  font-size: 8pt;
  text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.35);
  z-index: 2; }
  .task-state-box:hover, .undecided-box:hover, .inprocess-box:hover, .test-box:hover, .faile-box:hover, .success-box:hover, .all-box:hover {
    color: #fff; }

.undecided-box {
  background-color: #fff;
  border-color: #b7b7b7;
  text-shadow: 1px 1px 2px rgba(199, 199, 199, 0.35); }
  .undecided-box:hover {
    color: currentColor; }

.inprocess-box {
  background-color: #3498db;
  border-color: #2980b9 !important;
  color: #fff; }

.test-box {
  background-color: #f1c40f;
  border-color: #f39c12 !important;
  color: #fff; }

.faile-box {
  background-color: #e74c3c;
  border-color: #c0392b !important;
  color: #fff; }

.success-box {
  background-color: #2ecc71;
  border-color: #27ae60 !important;
  color: #fff; }

.all-box {
  background-color: #95a5a6;
  border-color: #7f8c8d !important;
  color: #fff; }

.test, .faile, .success, .undecided, .inprocess {
  display: none; }

.show-all .test, .show-all .faile, .show-all .success, .show-all .undecided, .show-all .inprocess {
  display: block; }

.only-inprocess .inprocess {
  display: block; }

.animate-enter,
.animate-leave {
  -moz-transition: 400ms cubic-bezier(0.42, 0, 0.58, 1) all;
  -o-transition: 400ms cubic-bezier(0.42, 0, 0.58, 1) all;
  -webkit-transition: 400ms cubic-bezier(0.42, 0, 0.58, 1) all;
  transition: 400ms cubic-bezier(0.42, 0, 0.58, 1) all;
  position: relative;
  display: block; }

.animate-enter.animate-enter-active,
.animate-leave {
  opacity: 1;
  right: 0;
  height: 30px; }

.animate-leave.animate-leave-active,
.animate-enter {
  opacity: 0;
  right: -50px;
  height: 0px; }

/*
  We're using CSS transitions for when
  the enter and move events are triggered
  for the element that has the .repeated-item
  class
*/
.repeated-item.ng-enter, .repeated-item.ng-move {
  transition: all 0.4s ease-in-out;
  opacity: 0; }

/*
 The ng-enter-active and ng-move-active
 are where the transition destination properties
 are set so that the animation knows what to
 animate.
*/
.repeated-item.ng-enter.ng-enter-active,
.repeated-item.ng-move.ng-move-active {
  opacity: 1; }

/*
  We're using CSS keyframe animations for when
  the leave event is triggered for the element
  that has the .repeated-item class
*/
.repeated-item.ng-leave {
  animation: 0.4s my_animation; }

@keyframes my_animation {
  from {
    opacity: 1; }
  to {
    opacity: 0; } }

.task-info {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
  box-shadow: 0 0 50px rgba(0, 0, 0, 0.15) inset;
  z-index: 1100;
  padding: 10%;
  transition: all 0.2s ease-in-out;
  opacity: 0; }
  .task-info .info-box {
    transition: all 0.4s ease-in-out;
    padding: 20pt 10pt 10pt 10pt;
    transform: scale(0.5) translateY(-100%);
    opacity: 0; }
    .task-info .info-box .info-close {
      top: 10pt;
      right: 10pt;
      cursor: pointer;
      opacity: 1;
      transition: all 0.2s ease-out;
      font-size: 14pt; }
    .task-info .info-box.show-info {
      transform: scale(1) translateY(0);
      opacity: 1; }
  .task-info.show-box {
    opacity: 1; }

.card-list .col-md-4, .card-list .col-sm-6, .card-list .col-xs-12 {
  width: 100%; }

.form-group label span {
  font-weight: normal; }

.text-normal span {
  font-weight: normal; }

