html {
    height: 100%;
    box-sizing: border-box;
}

*,
*:before,
*:after {
    box-sizing: inherit;
}

::-webkit-scrollbar {
    width: 6px;
    border: 1px solid transparent;
}

::-webkit-scrollbar-thumb {
    border-radius: 5px;
    background: #535353;
}

body {
    padding-top: 60px;
    padding-bottom: 85px;
    font-family: 'Gudea', sans-serif;
    position: relative;
    width: 100%;
    height: auto;
    min-height: 100%;
    /*user-select: none;*/
}

/* Set padding to keep content from hitting the edges */
.body-content {
    padding-left: 15px;
    padding-right: 15px;
}

/* Override the default bootstrap behavior where horizontal description lists
   will truncate terms that are too long to fit in the left column
*/

.dl-horizontal dt {
    white-space: normal;
}

.border {
    border: 1px #e5e5e5 solid;
}

.box-shadow {
    box-shadow: 0px 1px 3px rgba(0,0,0,0.05) !important;
}

/* validation style */
.input-validation-error {
    border: 1px solid rgba(200,0,0,0.5);
    box-shadow: 0 2px 6px rgba(255,0,0,0.3) inset;
}

.display-block {
    display: block;
}

.nice-col-padding .col-md-4, .nice-col-padding .col-sm-6 {
    padding-left: 5px !important;
    padding-right: 5px !important;
}

.dropdown-arrow {
    color: #999 !important;
    cursor: pointer;
    font-size: 9pt !important;
}

.font-size-8 {
    font-size: 8pt !important;
}

.text-bold {
    font-weight: bold;
}

.text-underline {
    text-decoration: underline;
}

.full-width {
    width: 100% !important;
}

.no-margin {
    margin: 0;
}

.opacity-5 {
    opacity: 0.5;
}

.opacity-8 {
    opacity: 0.8;
}

footer {
    border-top: 1px solid #eee;
    position: absolute;
    right: 0;
    bottom: 0;
    left: 0;
    padding: 10pt 0 5pt 0;

    .fa {
        font-size: 12pt;
        margin: 0 2pt;
    }
}

.center-it {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translateX(-50%) translateY(50%);
}

.padding-25 {
    padding: 25px;
}

.border-radius-2 {
    border-radius: 2px !important;
}

.card {
    border-radius: 2px;
    background-color: #fff;
    padding: 5px 10px;
    margin-top: 10px;
}

.card:hover, .card:focus {
    box-shadow: 0px 3px 3px -1px rgba(0,0,0,0.1) !important;
}

.card-button i {
    color: #999;
    width: 20px;
    height: 20px;
    margin-right: 5px;
    cursor: pointer;
    text-align: center;
}

.inprocess {
    .card {
        background-color: #3498db;
        border-color: #2980b9 !important;
        color: #fff;

        .dropdown-arrow, .card-button i {
            color: #fff !important;
        }
    }
}

.test {
    .card {
        background-color: #f1c40f;
        border-color: #f39c12 !important;
        color: #fff;

        .dropdown-arrow, .card-button i {
            color: #fff !important;
        }
    }
}

.faile {
    .card {
        background-color: #e74c3c;
        border-color: #c0392b !important;
        color: #fff;

        .dropdown-arrow, .card-button i {
            color: #fff !important;
        }
    }
}

.success {
    .card {
        background-color: #2ecc71;
        border-color: #27ae60 !important;
        color: #fff;

        .dropdown-arrow, .card-button i {
            color: #fff !important;
        }
    }
}

$taskStateFilterBox: 20px;

.task-state-box {
    display: inline-block;
    cursor: pointer;
    text-align: center;
    min-width: 65px;
    font-size: 8pt;
    @extend .border;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.35);
    z-index: 2;

    &:hover {
        color: #fff;
    }
}

.undecided-box {
    @extend .task-state-box;
    background-color: #fff;
    border-color: #b7b7b7;
    text-shadow: 1px 1px 2px rgba(199, 199, 199, 0.35);

    &:hover {
        color: currentColor;
    }
}

.inprocess-box {
    @extend .task-state-box;
    background-color: #3498db;
    border-color: #2980b9 !important;
    color: #fff;
}

.test-box {
    @extend .task-state-box;
    background-color: #f1c40f;
    border-color: #f39c12 !important;
    color: #fff;
}

.faile-box {
    @extend .task-state-box;
    background-color: #e74c3c;
    border-color: #c0392b !important;
    color: #fff;
}

.success-box {
    @extend .task-state-box;
    background-color: #2ecc71;
    border-color: #27ae60 !important;
    color: #fff;
}

.all-box {
    @extend .task-state-box;
    background-color: #95a5a6;
    border-color: #7f8c8d !important;
    color: #fff;
}

.test, .faile, .success, .undecided, .inprocess {
    display: none;
}

.show-all {
    .test, .faile, .success, .undecided, .inprocess {
        display: block;
    }
}

.only-inprocess {
    .inprocess {
        display: block;
    }
}

.animate-enter,
.animate-leave {
    -moz-transition: 400ms cubic-bezier(0.420, 0.000, 0.580, 1.000) all;
    -o-transition: 400ms cubic-bezier(0.420, 0.000, 0.580, 1.000) all;
    -webkit-transition: 400ms cubic-bezier(0.420, 0.000, 0.580, 1.000) all;
    transition: 400ms cubic-bezier(0.420, 0.000, 0.580, 1.000) all;
    position: relative;
    display: block;
}

.animate-enter.animate-enter-active,
.animate-leave {
    opacity: 1;
    right: 0;
    height: 30px;
}

.animate-leave.animate-leave-active,
.animate-enter {
    opacity: 0;
    right: -50px;
    height: 0px;
}

/*
  We're using CSS transitions for when
  the enter and move events are triggered
  for the element that has the .repeated-item
  class
*/
.repeated-item.ng-enter, .repeated-item.ng-move {
    transition: all 0.4s ease-in-out;
    opacity: 0;
}

/*
 The ng-enter-active and ng-move-active
 are where the transition destination properties
 are set so that the animation knows what to
 animate.
*/
.repeated-item.ng-enter.ng-enter-active,
.repeated-item.ng-move.ng-move-active {
    opacity: 1;
}

/*
  We're using CSS keyframe animations for when
  the leave event is triggered for the element
  that has the .repeated-item class
*/
.repeated-item.ng-leave {
    animation: 0.4s my_animation;
}

@keyframes my_animation {
    from {
        opacity: 1;
    }

    to {
        opacity: 0;
    }
}

.task-info {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
    box-shadow: 0 0 50px rgba(0,0,0,0.15) inset;
    z-index: 1100;
    padding: 10%;
    transition: all 0.2s ease-in-out;
    opacity: 0;

    .info-box {
        @extend .card;
        transition: all 0.4s ease-in-out;
        padding: 20pt 10pt 10pt 10pt;
        transform: scale(0.5) translateY(-100%);
        opacity: 0;

        .info-close {
            top: 10pt;
            right: 10pt;
            cursor: pointer;
            opacity: 1;
            transition: all 0.2s ease-out;
            font-size: 14pt;
        }

        &.show-info {
            transform: scale(1) translateY(0);
            opacity: 1;
        }
    }

    &.show-box {
        opacity: 1;
    }
}


.card-list {
    .col-md-4, .col-sm-6, .col-xs-12 {
        width: 100%;
    }
}
